

import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { query, transaction } from '@/lib/db-http-cloudflare';
import { authOptions } from '../../../auth/[...nextauth]/route.js';

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
});

export async function GET(request, { params }) {
  try {
    const session = await getServerSession(authOptions);
    if (!session?.user?.email) {
      return NextResponse.json(
        { error: 'Authentication required' },
        { status: 401 }
      );
    }

    const { id: serviceId } = params;
    const { searchParams } = new URL(request.url);
    const days = parseInt(searchParams.get('days')) || 30;

    // Validate that the user has access to this service
    const serviceCheck = await query(
      `
      SELECT s.id, s.name
      FROM public.services s
      JOIN public.status_pages sp ON s.status_page_id = sp.id
      JOIN public.organizations o ON sp.organization_id = o.id
      JOIN public.organization_members om ON o.id = om.organization_id
      JOIN public.users u ON om.user_id = u.id
      WHERE s.id = $1 AND u.email = $2 AND om.is_active = true
    `,
      [serviceId, session.user.email]
    );

    if (serviceCheck.rows.length === 0) {
      return NextResponse.json(
        { error: 'Service not found or access denied' },
        { status: 404 }
      );
    }

    const service = serviceCheck.rows[0];

    // Get uptime percentage for different periods
    const uptimeQueries = await Promise.all([
      // Last 24 hours
      query(
        "SELECT calculate_service_uptime($1, NOW() - INTERVAL '24 hours', NOW()) as uptime",
        [serviceId]
      ),
      // Last 7 days
      query(
        "SELECT calculate_service_uptime($1, NOW() - INTERVAL '7 days', NOW()) as uptime",
        [serviceId]
      ),
      // Last 30 days
      query(
        "SELECT calculate_service_uptime($1, NOW() - INTERVAL '30 days', NOW()) as uptime",
        [serviceId]
      ),
      // Last 90 days
      query(
        "SELECT calculate_service_uptime($1, NOW() - INTERVAL '90 days', NOW()) as uptime",
        [serviceId]
      ),
    ]);

    const uptimeStats = {
      last24Hours: parseFloat(uptimeQueries[0].rows[0].uptime),
      last7Days: parseFloat(uptimeQueries[1].rows[0].uptime),
      last30Days: parseFloat(uptimeQueries[2].rows[0].uptime),
      last90Days: parseFloat(uptimeQueries[3].rows[0].uptime),
    };

    // Get timeline data for visualization
    const timelineQuery = await query(
      `
      SELECT 
        started_at as period_start,
        COALESCE(ended_at, NOW()) as period_end,
        status,
        EXTRACT(EPOCH FROM (COALESCE(ended_at, NOW()) - started_at)) / 3600 as duration_hours
      FROM public.service_status_history 
      WHERE service_id = $1 
      AND started_at >= NOW() - ($2 || ' days')::INTERVAL
      ORDER BY started_at
    `,
      [serviceId, days]
    );

    const timeline = timelineQuery.rows.map(row => ({
      periodStart: row.period_start,
      periodEnd: row.period_end,
      status: row.status,
      durationHours: parseFloat(row.duration_hours),
    }));

    // Calculate incident summary for the period
    const incidentQuery = await query(
      `
      SELECT 
        status,
        COUNT(*) as count,
        SUM(EXTRACT(EPOCH FROM (COALESCE(ended_at, NOW()) - started_at)) / 60) as total_minutes
      FROM public.service_status_history 
      WHERE service_id = $1 
      AND started_at >= NOW() - ($2 || ' days')::INTERVAL
      AND status IN ('degraded', 'down')
      GROUP BY status
    `,
      [serviceId, days]
    );

    const incidents = incidentQuery.rows.reduce((acc, row) => {
      acc[row.status] = {
        count: parseInt(row.count),
        totalMinutes: parseFloat(row.total_minutes),
      };
      return acc;
    }, {});

    return NextResponse.json({
      success: true,
      service: {
        id: service.id,
        name: service.name,
      },
      uptimeStats,
      timeline,
      incidents,
      period: {
        days,
        startDate: new Date(
          Date.now() - days * 24 * 60 * 60 * 1000
        ).toISOString(),
        endDate: new Date().toISOString(),
      },
    });
  } catch (error) {
    console.error('Error fetching SLA data:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}
